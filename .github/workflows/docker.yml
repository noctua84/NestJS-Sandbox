name: Docker Pipeline

on:
  push:
    branches:
      - main
    paths:
      - 'package.json'

  workflow_dispatch:

permissions:
  packages: write

jobs:
  build-and-push-docker:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        if: env.stop_early != 'true'
        uses: actions/checkout@v4

      - name: Check for dependency updates
        id: check_updates
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          current_sha=$(git rev-parse HEAD)
          latest_sha=$(curl --silent --header "Authorization: token $GITHUB_TOKEN" \
          https://api.github.com/repos/${{ github.repository }}/commits/${{ github.head_ref }} \
          | jq -r '.sha')
          if [[ "$current_sha" != "$latest_sha" ]]; then
          echo "updated=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Pull latest changes
        if: steps.check_updates.outputs.updated == 'true'
        run: git pull

      - name: Install jq
        run: sudo apt-get install jq

      - name: Check version change
        id: check_version
        run: |
          if [[ $(git diff --name-only HEAD^ HEAD | grep package.json) ]]; then
            echo "version_changed=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Set up Docker Buildx
        if: steps.check_version.outputs.version_changed != 'true'
        uses: docker/setup-buildx-action@v3

      - name: login to GitHub Container Registry
        if: steps.check_version.outputs.version_changed != 'true'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract repository info
        if: steps.check_version.outputs.version_changed != 'true'
        id: extract_info
        run: |
          echo "PACKAGE_VERSION=$(jq -r '.version' package.json)" >> "$GITHUB_OUTPUT"
          echo "PACKAGE_NAME=$(jq -r '.name' package.json)" >> "$GITHUB_OUTPUT"
          echo "REPOSITORY_NAME=$(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_OUTPUT"

      - name: Build Docker image
        if: steps.check_version.outputs.version_changed != 'true'
        uses: docker/build-push-action@v6
        env:
          PACKAGE_VERSION: ${{ steps.extract_info.outputs.PACKAGE_VERSION }}
          PACKAGE_NAME: ${{ steps.extract_info.outputs.PACKAGE_NAME }}
          REPOSITORY_NAME: ${{ steps.extract_info.outputs.REPOSITORY_NAME }}
        with:
          context: .
          file: ./docker/Dockerfile
          tags: ghcr.io/${{ env.REPOSITORY_NAME }}/${{ env.PACKAGE_NAME }}:${{ env.PACKAGE_VERSION }}
          load: true

      - name: Extract Docker image digest
        if: steps.check_version.outputs.version_changed != 'true'
        id: docker_build
        env:
          PACKAGE_VERSION: ${{ steps.extract_info.outputs.PACKAGE_VERSION }}
          PACKAGE_NAME: ${{ steps.extract_info.outputs.PACKAGE_NAME }}
          REPOSITORY_NAME: ${{ steps.extract_info.outputs.REPOSITORY_NAME }}
        run: echo "digest=$(docker inspect ghcr.io/${{ env.REPOSITORY_NAME }}/${{ env.PACKAGE_NAME }}:${{ env.PACKAGE_VERSION }} --format='{{index .RepoDigests 0}}')" >> "$GITHUB_OUTPUT"
        
      - name: Push Docker image
        if: steps.check_version.outputs.version_changed != 'true'
        run: docker push ghcr.io/${{ steps.extract_info.outputs.REPOSITORY_NAME }}/${{ steps.extract_info.outputs.PACKAGE_NAME }}:${{ steps.extract_info.outputs.PACKAGE_VERSION }}

      - name: Trigger Devtron Webhook
        if: steps.check_version.outputs.version_changed != 'true'
        env:
          PACKAGE_VERSION: ${{ steps.extract_info.outputs.PACKAGE_VERSION }}
          PACKAGE_NAME: ${{ steps.extract_info.outputs.PACKAGE_NAME }}
          REPOSITORY_NAME: ${{ steps.extract_info.outputs.REPOSITORY_NAME }}
        run: |
          # generate JSON payload for Devtron webhook
          JSON_PAYLOAD=$(jq -n \
                  --arg dockerImage "ghcr.io/${{ env.REPOSITORY_NAME }}/${{ env.PACKAGE_NAME }}:${{ env.PACKAGE_VERSION }}" \
                  --arg digest "${{ steps.docker_build.outputs.digest }}" \
                  --arg commitHash "${{ github.sha }}" \
                  --arg message "${{ github.event.head_commit.message }}" \
                  --arg author "${{ github.actor }}" \
                  --arg commitTime "${{ github.event.head_commit.timestamp }}" \
                  '{
                    "dockerImage": $dockerImage,
                    "digest": $digest,
                    "dataSource": "ext",
                    "materialType": "git",
                    "ciProjectDetails": [
                      {
                        "commitHash": $commitHash,
                        "message": $message,
                        "author": $author,
                        "commitTime": $commitTime
                      }
                    ]
                  }')
          
          # send the JSON payload to Devtron webhook
          curl -f --location --request POST \
          'http://157.90.27.220:30673/orchestrator/webhook/ext-ci/1' \
          --header 'Content-Type: application/json' \
          --header "api-token: ${{ secrets.DEVTRON_API_TOKEN }}" \
          --data-raw "$JSON_PAYLOAD"
